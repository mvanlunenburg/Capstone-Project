mod2 <- train(wage ~.,method="rf",
data=training,
trControl = trainControl(method="cv"),number=3)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library(quantmod)
install.packages("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
head(GOOG)
mGoog <- to.monthly(GOOG)
plot(decompose(ts1),xlab="Years+1")
kMeans1 <- kmeans(subset(training,select=-c(Species)),centers=3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width,Petal.Length,colour=clusters,data=training)
qplot(Petal.Width,Petal.Length,colour=clusters,data=training)
table(kMeans1$cluster,training$Species)
modFit <- train(clusters ~.,data=subset(training,select=-c(Species)),method="rpart")
table(predict(modFit,training),training$Species)
testClusterPred <- predict(modFit,testing)
table(testClusterPred ,testing$Species)
library(caret)
library(knitr)
library(randomForest)
library(rpart)
library(rpart.plot)
# Download the dataset
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Load the dataset into memory
trainingData <- read.csv(url(trainUrl), na.strings = c("NA", "#DIV/0!", ""))
testingData <- read.csv(url(testUrl), na.strings = c("NA", "#DIV/0!", ""))
#
trainingData <- trainingData[, colSums(is.na(trainingData)) == 0]
testingData <- testingData[, colSums(is.na(testingData)) == 0]
# Delete variables that are not related
trainingData <- trainingData[, -c(1:7)]
testingData <- testingData[, -c(1:7)]
# partioning the training set into two different dataset
traningPartitionData <- createDataPartition(trainingData$classe,  p = 0.7, list = F)
trainingDataSet <- trainingData[traningPartitionData, ]
testingDataSet <- trainingData[-traningPartitionData, ]
dim(trainingData); dim(testingDataSet)
decisionTreeModel <- rpart(classe ~ ., data = trainingDataSet, method = "class")
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv2(url(trainUrl), na.strings = c("NA", "#DIV/0!", ""))
testing <- read.csv2(url(testUrl), na.strings = c("NA", "#DIV/0!", ""))
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Load the dataset into memory
trainingData <- read.csv(url(trainUrl), na.strings = c("NA", "#DIV/0!", ""))
testingData <- read.csv(url(testUrl), na.strings = c("NA", "#DIV/0!", ""))
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings = c("NA", "#DIV/0!", ""))
testing <- read.csv(url(testUrl), na.strings = c("NA", "#DIV/0!", ""))
training <- training[, colSums(is.na(training)) == 0]
testing <- testing[, colSums(is.na(testing)) == 0]
training_sel<- training[, -c(1:7)]
testing_sel<- testing[, -c(1:7)]
inTrain <- createDataPartition(y=training_sel$classe,p=0.7, list=FALSE)
training_data <- training_sel[inTrain,]
validation_data <- training_sel[-inTrain,]
dim(training_data); dim(validation_data)
modFitDT <- rpart(classe ~ ., data = training_data_sel, method = "class")
modFitDT <- rpart(classe ~ ., data = training_data, method = "class")
DT_pred <- predict(modFitDT, validation_data, type = "class")
rpart.plot(modFitDT, main = "Decision Tree", under = T, faclen = 0)
confusionMatrix(DT_pred, testing_data_sel$classe)
confusionMatrix(DT_pred, validation_data$classe)
set.seed(2236)
fitcontrol <- trainControl(method="cv",number=10,allowParallel = TRUE)
modFitRF <- train(classe ~ .,data=training_data,method="rf",trControl=fitcontrol, ntree=10)
RF_pred <- predict(modFitRF, validation_data, type = "class")
RF_pred <- predict(modFitRF, validation_data)
confusionMatrix(RF_pred, validation_data$classe)
RF_pred_def <- predict(modFitRF, testing)
test_pred <-cbind(RF_pred_def, testing)
View(test_pred)
test_pred
hist(test_pred$RF_pred_def)
qplot(RF_pred_def, fill = "4", data=testing, main="Distribution of Classes")
qplot(RF_pred_def, data=testing, main="Distribution of Classes")
test_pred
View(test_pred)
install.packages("miniUI")
library(miniUI)
library(shiny)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers(1:10, 1:10)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
treesIPicked <- pickTrees()
treesIPicked
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
Fruits
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
plot(M)
plot(M)
print(M)
print(M, title="test.html")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
plot(G)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
print(GTM,"chart")
Exports
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
plot(G2)
df
plot(Line)
plot(GTM)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
plot(M)
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
library(plotly)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(tidyr)
library(dplyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
head(stocks)
plot_ly(x = ~precip, type = "histogram")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
borders <- list(color = toRGB("red"))
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
hopkinsIcon <- makeIcon(
iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
df <- data.frame(lat = runif(20, min = 52.2, max = 52.3), lng = runif(20, min = 4.5, max = 4.9))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4), lng = runif(20, min = 4.5, max = 4.9))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4), lng = runif(20, min = 4.8, max = 5.0))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
knitr::opts_chunk$set(echo = FALSE)
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4), lng = runif(20, min = 4.8, max = 5.0))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
unlink('~/GitHub/Developing_Data_Products/Peer-graded_Assignment_R_Markdown_and_Leaflet_cache', recursive = TRUE)
install.packages("htmlwidgets")
install.packages("magrittr")
library(htmlwidgets)
library(magrittr)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
library(htmlwidgets)
library(magrittr)
knitr::opts_chunk$set(echo = FALSE)
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4), lng = runif(20, min = 4.8, max = 5.0))
df %>%
leaflet()
library(leaflet)
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4), lng = runif(20, min = 4.8, max = 5.0))
df %>%
leaflet()
addTiles()
?leaflet
??leaflet
df <- data.frame(lat = runif(500, min = 52.33, max = 52.4),
lng = runif(500, min = 4.8, max = 5.0))
View(df)
lng = runif(20, min = 4.8, max = 5.0))
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4),
lng = runif(20, min = 4.8, max = 5.0))
View(df)
myOffice<- data.frame(lat=52.354665, lng=4.955587)
View(myOffice)
rbind(myoffice, df)
rbind(myOffice, df)
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4),
lng = runif(20, min = 4.8, max = 5.0))
myOffice<- data.frame(lat=52.354665, lng=4.955587)
df <- rbind(myOffice, df)
View(df)
df <- data.frame(lat = runif(20, min = 52.33, max = 52.4),
lng = runif(20, min = 4.8, max = 5.07))
myOffice<- data.frame(lat=52.354665, lng=5.069334)
df <- rbind(myOffice, df)
myPopup <- c("<a href='https://www.youtube.com/watch?v=mETC4WgYEu0'>My Office</a>",
"","","","","","","","","","","","","","","","","","","","","")
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), popup = myPopup)
library(leaflet)
df %>%
leaflet() %>%
addTiles()
?line
runApp()
load("C:/Users/Mari van Lunenburg/Desktop/Coursera/R Programming/Capstone Project/Capstone.RData")
setwd("C:/Users/Mari van Lunenburg/Desktop/Coursera/R Programming/Capstone Project/final")
## Open Connections
EnBlogs   <- file("en_US/en_US.blogs.txt")
EnNews    <- file("en_US/en_US.news.txt")
EnTwitter <- file("en_US/en_US.twitter.txt")
## Read files and assign to structures
blogs_En   <- readLines(EnBlogs, encoding="UTF-8", skipNul = TRUE)
news_En    <- readLines(EnNews, encoding="UTF-8", skipNul = TRUE)
twitter_En <- readLines(EnTwitter, encoding="UTF-8", skipNul = TRUE)
## Read file lenghts
lenghtBlogs   <- length(blogs_En)
lenghtNews    <- length(news_En)
lenghtTwitter <- length(twitter_En)
## Close connections
close(EnBlogs)
close(EnNews)
close(EnTwitter)
summary(EnBlogs)
summary(blogs_En)
sum(nchar(blogs_En)
)
#read file lenghts
lenghtBlogs   <- length(blogs_En)
lenghtNews    <- length(news_En)
lenghtTwitter <- length(twitter_En)
301+284+19
library(ggplot2)
par(mfrow = c(1, 1))
ggplot(freqCorpus[1:20,], aes(word, freq))   + geom_bar(stat = "identity") + coord_flip()
set.seed(1289)
freq <- TermDocumentMatrix(sampleCorpus)
library(tm)
library(SnowballC)
library(RWeka)
library(wordcloud)
library(ggplot2)
set.seed(1289)
freq <- TermDocumentMatrix(sampleCorpus)
freq <- as.matrix(freq)
freqCorpus <- sort(rowSums(freq),decreasing=TRUE)
freqCorpus <- data.frame(word = names(freqCorpus),freq=freqCorpus)
head(freqCorpus, 10)
options(mc.cores=1)
set.seed(1290)
bigram <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
freqBi <- TermDocumentMatrix(sampleCorpus, control=list(tokenize = bigram, bounds = list(local = c(2,Inf))))
freqBi <- as.matrix(freqBi)
freqBi <- sort(rowSums(freqBi),decreasing=TRUE)
freqBiCorpus <- data.frame(word = names(freqBi),freq=freqBi)
trigram <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
freqTri <- TermDocumentMatrix(sampleCorpus, control = list(tokenize = trigram, bounds = list(local = c(2,Inf))))
freqTri <- as.matrix(freqTri)
freqTri <- sort(rowSums(freqTri),decreasing=TRUE)
freqTriCorpus <- data.frame(word = names(freqTri),freq=freqTri)
rm(lenghtTwitter,lenghtNews,lenghtBlogs,twitter_En, news_En, blogs_En, EnTwitter, EnNews, EnBlogs)
save.image(file = "Capstone2.RData")
par(mfrow = c(1, 3))
wordcloud(freqCorpus[,1], freqCorpus[,2], min.freq =200, random.order = F, ordered.colors = F, colors=brewer.pal(8,"Dark2"))
wordcloud(freqBiCorpus[,1], freqBiCorpus[,2], min.freq =5, random.order = F, ordered.colors = F, colors=brewer.pal(8,"Dark2"))
wordcloud(freqTriCorpus[,1], freqTriCorpus[,2], min.freq =5, random.order = F, ordered.colors = F, colors=brewer.pal(8,"Dark2"))
par(mfrow = c(1, 1))
ggplot(freqCorpus[1:20,], aes(word, freq))   + geom_bar(stat = "identity") + coord_flip()
ggplot(freqCorpus[1:20,], aes(word, freq))   + geom_bar(stat = "identity", fill="#ce42f4") + coord_flip() + ggtitle("Monogram")
ggplot(freqBiCorpus[1:20,], aes(word, freq))   + geom_bar(stat = "identity", fill="#4741f4") + coord_flip() + ggtitle("Bigram")
ggplot(freqTriCorpus[1:20,], aes(word, freq))   + geom_bar(stat = "identity", fill="#9cf444") + coord_flip() + ggtitle("Trigram")
ggplot(freqTriCorpus[1:20,], aes(word, freq))   + geom_bar(stat = "identity", fill="#ff7221") + coord_flip() + ggtitle("Trigram")
lenghtBlogs   <- length(blogs_En)
stopwords()
setwd("C:/Users/Mari van Lunenburg/Desktop/Coursera/R Programming/Capstone Project/Prediction")
library(shinythemes),
library(shiny),
library(tm),
library(stringr),
library(markdown),
library(stylo)
library(shinythemes),
library(shiny),
library(tm),
library(stringr),
library(markdown),
library(stylo)
library(markdown)
library(shinythemes)
library(shiny)
library(tm)
library(stringr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
